{"version":3,"sources":["Item.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Item","props","className","num","join","onClick","_","clickHandler","STEPS","size","top","bottom","left","right","shuffle","dictionary","sort","Math","random","createDictionary","console","error","dict","Array","from","length","v","k","push","App","useState","stepCount","setStepCount","items","setItems","playMode","setPlayMode","playTableSize","setPlayTableSize","isWinner","setIsWinner","e","id","log","currentNumPosition","indexOf","step","clickedPosition","zeroPosition","steps","calcStep","validateStep","calculatedStep","resultPosition","parseInt","makeStep","newItems","prevNum","slice","every","res","isWin","restart","onChange","mode","target","value","sqrt","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fc1c00a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\ninterface IProps {\r\n    num: number;\r\n    clickHandler: (e: React.MouseEvent, id: number) => void;\r\n}\r\n\r\nfunction Item(props: IProps) {\r\n    return (\r\n        <div className={['Item', props.num ? 'FilledItem' : 'EmptyItem'].join(' ')}\r\n            onClick={(_) => props.clickHandler(_, props.num)}\r\n        >{!!props.num ? props.num : ''}</div>\r\n    );\r\n}\r\n\r\nexport default Item;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Item from \"./Item\";\n\n// Вспомогательные функции\n// Метод выполнения хода, если это возможно\nfunction makeStep(items: number[], clickedPosition: number, size: number): number | null {\n    // Если не отрицательный результат шага и не больше 16 и на эту позицию выпадает пустая пятнашка\n    const zeroPosition = items.indexOf(0);\n    // Словарь возможных шагов\n    const steps = STEPS(size);\n    const calcStep = {\n        top: clickedPosition + steps.top,\n        bottom: clickedPosition + steps.bottom,\n        left: clickedPosition + steps.left,\n        right: clickedPosition + steps.right\n    }\n    /**\n     * Валидность результата шага\n     * @param calculatedStep\n     */\n    const validateStep = (calculatedStep: number): string | null => {\n        return (calculatedStep === zeroPosition) ? calculatedStep + '' : null\n    };\n    // Получаем результат хода в строковом значении (чтобы не было проблем с 0ой ячейкой)\n    const resultPosition = validateStep(calcStep.top) || validateStep(calcStep.bottom) || validateStep(calcStep.left) || validateStep(calcStep.right);\n    return resultPosition !== null ? parseInt(resultPosition, 10) : null;\n}\n\n/**\n * Проверяет победил ли пользователь\n * @param items\n */\nfunction isWin(items: number[]): boolean {\n    // все кнопки должны быть упорядочены по возрастанию\n    let prevNum: number | null = null;\n    // Отбрасываю последний элемент (в идеальном результате там должен быть 0), чтобы условие работало всегда\n    const checkedItems = items.slice(0, items.length - 2);\n    return checkedItems.every((num) => {\n        if (prevNum === null) {\n            // Запоминаем первую пятнашку для дальнейшего сравнения\n            prevNum = num;\n            return true;\n        } else {\n            // проверяем с предыдущей пятнашкой\n            const res = num > prevNum;\n            if (res) {\n                // пока процесс валидации идет хорошо, запомним новое предыдущее значение\n                prevNum = num;\n            }\n            return res;\n        }\n    });\n}\n\n/**\n * Генерация шагов для любой из возможных для выбора игровой сетки\n * @param size\n * @constructor\n */\nconst STEPS = (size: number) => {\n    return {\n        top: -1 * size,\n        bottom: size,\n        left: -1,\n        right: 1\n    }\n};\n\n// Перемешиваем исходный массив\nfunction shuffle(dictionary: number[]): number[] {\n    const newItems = [...dictionary];\n    return newItems.sort(() => Math.random() - 0.5);\n}\n\n/**\n * Создаем игровую сетку\n * @param size\n */\nfunction createDictionary(size: number): number[] {\n    if (!size) {\n        console.error(`Неправильный размер пятнашек`);\n    }\n    const dict = Array.from({length: size}, (v, k) => k+1);\n    dict.push(0);\n    return dict;\n}\n\nfunction App() {\n    const dictionary = createDictionary(15);\n    // счетчик шагов\n    const [stepCount, setStepCount] = useState(0);\n    const [items, setItems] = useState(shuffle(dictionary));\n    const [playMode, setPlayMode] = useState(15);\n    const [playTableSize, setPlayTableSize] = useState(4);\n    const [isWinner, setIsWinner] = useState(false);\n    const clickHandler = (e: React.MouseEvent, id: number) => {\n        console.log(`Нажата пятнашка с номером ${id}`)\n\n        const currentNumPosition = items.indexOf(id);\n        console.log(`Текущее положение ${id} = ${currentNumPosition}`);\n        if (!!id) {\n            const step = makeStep(items, currentNumPosition, playTableSize);\n            if (step !== null) {\n                const newItems = [...items];\n                newItems[currentNumPosition] = 0;\n                newItems[step] = id;\n                setItems(newItems);\n                setStepCount(stepCount + 1);\n                if (isWin(newItems)) {\n                    setIsWinner(true);\n                }\n            }\n        }\n    };\n    /**\n     * Начать собирать пятнашки заново\n     * @param e\n     */\n    const restart = (e: React.MouseEvent) => {\n        setStepCount(0);\n        setItems(shuffle(items));\n        setIsWinner(false);\n    };\n    /**\n     * Изменить размерность игровой площадки\n     * @param e\n     */\n    const changeMode = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const mode = parseInt(e.target.value, 10);\n        setPlayTableSize(Math.sqrt(mode + 1));\n        const dictionary = createDictionary(mode);\n        setItems(shuffle(dictionary));\n        setPlayMode(mode);\n        setStepCount(0);\n        setIsWinner(false);\n    };\n\n    return (\n        <div className=\"App container\">\n            <h1 className='display-6'>Поиграй в старые добрые пятнашки</h1>\n            <div>\n                <span>Размерность поля:</span>\n                <select id=\"selectMode\" onChange={changeMode} value={playMode} className=\"form-select\">\n                    <option value={8}>3 x 3 (минимально возможный)</option>\n                    <option value={15}>4 x 4 (стандартный размер)</option>\n                    <option value={24}>5 x 5 (ты любишь рисковать)</option>\n                    <option value={35}>6 x 6 (ты не пройдешь!)</option>\n                </select>\n            </div>\n            {\n                isWinner ?\n                    <div className='Congratulations shadow-lg p-3 mb-4 mt-4 bg-body'>\n                        <h2>Поздравляю с победой!</h2>\n                        <p>Может быть сыграете еще разок-другой?</p>\n                        <button onClick={restart} className='btn btn-primary p-3'>Начать сначала</button>\n                    </div>\n                    : ''\n            }\n            <div className={['PlayArea', 'PlayArea-Size-'+playTableSize].join(' ')}>\n                {items.map(num => <Item num={num} clickHandler={clickHandler} key={num} />)}\n            </div>\n            <div className=\"Info\">\n                <div className=\"StepsCount p-3 mb-2 bg-secondary text-white\">Сделано шагов: {stepCount}</div>\n                {stepCount && !isWinner ? <button onClick={restart} className='btn btn-primary p-3'>Начать сначала</button> : ''}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}